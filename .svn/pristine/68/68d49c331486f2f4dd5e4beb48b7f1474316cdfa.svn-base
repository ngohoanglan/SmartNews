//
//  StringExtension.swift
//  CoreDataCRUD
//
//  Created by c0d3r on 30/09/15.
//  Copyright Â© 2015 io pandacode. All rights reserved.
//
import UIKit
import Foundation
extension UIColor {
    
    static func rgb(_ red: CGFloat, green: CGFloat, blue: CGFloat) -> UIColor {
        return UIColor(red: red/255, green: green/255, blue: blue/255, alpha: 1)
    }
    
}
extension String {
    /**
     Custom extension method to append Strings
     
     - Parameter str: The string to append to current String
     - Returns: Void
     */
    mutating func append(_ str: String) {
        self = self + str
    }
    
    /**
     Custom extension method to URL encode a String
     
     - Returns: String the URLEncoded String
     */
    mutating func URLEncodedString() -> String? {
        let customAllowedSet =  CharacterSet.urlQueryAllowed
        let escapedString = self.addingPercentEncoding(withAllowedCharacters: customAllowedSet)
        
        return escapedString
    }
    
    func base64Encoded() -> String {
        let plainData = data(using: String.Encoding.utf8)
        let base64String = plainData?.base64EncodedString(options: NSData.Base64EncodingOptions.lineLength64Characters)
        return base64String!
    }
   
    func indexOfString(_ intput:String)->Int
    {
        let range: Range<String.Index> = self.range(of: intput)!
        let index:Int=self.characters.distance(from: self.startIndex, to: range.lowerBound)
        return index
    }
    
    func subStringFromTwoTag(_ startTag:String, endTag:String)->String
    {
        if(self.contains(startTag) && self.contains(endTag)){
        let startRange: Range<String.Index> = self.range(of: startTag)!
        let endRange: Range<String.Index> = self.range(of: endTag)!
       
           if(startRange.upperBound > endRange.lowerBound)
           {
                let indexOfStart =  self.indexOfString(startTag)
                let temp=self.index(self.startIndex, offsetBy: indexOfStart)..<self.endIndex
                let newString=self[temp]
            if(newString.contains(startTag) && newString.contains(endTag)){
                let newStartRange: Range<String.Index> = newString.range(of: startTag)!
                let newEndRange: Range<String.Index> = newString.range(of: endTag)!
                if(newStartRange.upperBound < newEndRange.lowerBound)
                {
                    return newString.substring(with: (newStartRange.upperBound ..< newEndRange.lowerBound))
                }
            }
            }
            
        return self.substring(with: (startRange.upperBound ..< endRange.lowerBound))
         
        }
        return ""
    }
    
    func matchesForRegexInText(_ regex: String!, text: String!) -> [String] {
        
        do {
            let regex = try NSRegularExpression(pattern: regex, options: [])
            let nsString = text as NSString
            let results = regex.matches(in: text,
                options: [], range: NSMakeRange(0, nsString.length))
            return results.map { nsString.substring(with: $0.range)}
        } catch let error as NSError {
            print("invalid regex: \(error.localizedDescription)")
            return []
        }
    }
   /* func getLinkImage() -> String {
        let regexStr = "(http://[^\\s]+(.jpg|.png|.gif))"
       // return regex.firstMatchInString(self, options:[],
        //    range: NSMakeRange(0, utf16.count)) != nil
        
    
        let regex = NSRegularExpression(pattern: regexStr, options: NSRegularExpressionOptions.CaseInsensitive)
       
        let results = regex.matchesInString(self,
            options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, utf16.count))
            as! [NSTextCheckingResult]
        return map(results) { self.substringWithRange($0.range)}
        
    }*/
    
   }
